"""
Test script for the Leo Debugger Agent
"""
import asyncio
from src.leoagents import DebuggerAgent
from src.models import BuildResult
import tempfile
import os

# Exemple de code Leo avec une erreur
BUGGY_LEO_CODE = """
program token_example.aleo {
    // Mapping to store token balances
    mapping balances: address => u64;
    
    // Transition to mint tokens (has a bug)
    transition mint(recipient: address, amount: u64) {
        // BUG: trying to use += on immutable value
        let current_balance: u64 = balances.get(recipient);
        current_balance += amount;  // This will cause an error
        balances.set(recipient, current_balance);
    }
    
    // Transition to transfer tokens
    transition transfer(from: address, to: address, amount: u64) {
        let sender_balance: u64 = balances.get(from);
        assert(sender_balance >= amount);
        
        let new_sender_balance: u64 = sender_balance - amount;
        balances.set(from, new_sender_balance);
        
        let recipient_balance: u64 = balances.get(to);
        let new_recipient_balance: u64 = recipient_balance + amount;
        balances.set(to, new_recipient_balance);
    }
}
"""

# Exemple d'erreur de compilation
COMPILATION_ERROR = """
Error [ETYC0372003]: cannot assign to immutable variable 'current_balance'
    --> token_example.aleo:9:9
     |
   9 |         current_balance += amount;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = Cannot assign to immutable variable 'current_balance'
"""


async def test_debugger():
    """Test the debugger agent with buggy Leo code"""
    
    print("üîç Testing Leo Debugger Agent with Claude...\n")
    
    # Create a temporary workspace
    with tempfile.TemporaryDirectory() as tmpdir:
        # Create Leo project structure
        project_dir = os.path.join(tmpdir, "token_example")
        os.makedirs(project_dir)
        
        # Write the buggy code
        leo_file = os.path.join(project_dir, "src", "main.leo")
        os.makedirs(os.path.dirname(leo_file), exist_ok=True)
        with open(leo_file, "w") as f:
            f.write(BUGGY_LEO_CODE)
        
        # Initialize debugger agent (will use Claude by default)
        debugger = DebuggerAgent()
        
        print("üìù Original buggy code:")
        print(BUGGY_LEO_CODE)
        print("\n‚ùå Compilation error:")
        print(COMPILATION_ERROR)
        
        # Create mock build result
        build_result = BuildResult(
            status="error",
            stderr=COMPILATION_ERROR,
            success=False
        )
        
        print("\nüêõ Starting debug analysis with Claude...")
        
        # Debug the code
        debug_analysis = await debugger.debug_code(
            code=BUGGY_LEO_CODE,
            error_message=COMPILATION_ERROR,
            workspace_path=project_dir,
            program_name="token_example"
        )
        
        print(f"\nüìä Debug Analysis:")
        print(f"  - Error Location: Line {debug_analysis.error_location}")
        print(f"  - Error Type: {debug_analysis.error_type}")
        print(f"  - Root Cause: {debug_analysis.root_cause}")
        print(f"  - Suggested Fix: {debug_analysis.suggested_fix}")
        print(f"  - Confidence: {debug_analysis.confidence:.2f}")
        
        # Fix the code based on analysis
        print("\nüîß Fixing code based on debug analysis...")
        fixed_code = await debugger.fix_code_interactive(
            code=BUGGY_LEO_CODE,
            debug_analysis=debug_analysis
        )
        
        print("\n‚úÖ Fixed code:")
        print(fixed_code.code)


async def test_simple_debug():
    """Test without actual Leo installation"""
    
    print("üß™ Testing Debugger Agent (simulation mode)...\n")
    
    # Initialize debugger
    debugger = DebuggerAgent()
    
    # Create a mock debug analysis
    from src.models import DebugAnalysis
    
    mock_analysis = DebugAnalysis(
        error_location=9,
        error_type="Type Error",
        error_description="Cannot assign to immutable variable",
        root_cause="The variable 'current_balance' is immutable but the code tries to modify it with += operator",
        suggested_fix="Declare current_balance as mutable or create a new variable for the updated value",
        confidence=0.95
    )
    
    print("üîç Mock Debug Analysis:")
    print(f"  - Error at line {mock_analysis.error_location}")
    print(f"  - Root cause: {mock_analysis.root_cause}")
    
    # Fix the code
    fixed_code = await debugger.fix_code_interactive(
        code=BUGGY_LEO_CODE,
        debug_analysis=mock_analysis
    )
    
    print("\n‚úÖ Fixed code generated by Claude:")
    print(fixed_code.code)


if __name__ == "__main__":
    # Run the simple test (doesn't require Leo installation)
    asyncio.run(test_simple_debug())
    
    # Uncomment to run full test with Leo debugger
    # asyncio.run(test_debugger()) 