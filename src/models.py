"""
Data models for LeoForge framework
"""
from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field
from enum import Enum
from datetime import datetime


class ProjectType(str, Enum):
    """Types of Leo projects that can be generated"""
    TOKEN = "token"
    NFT = "nft"
    DEFI = "defi"
    GAME = "game"
    ORACLE = "oracle"
    CUSTOM = "custom"


class UserQuery(BaseModel):
    """User's initial project request"""
    query: str = Field(..., description="Natural language project description")
    project_type: Optional[ProjectType] = None
    constraints: List[str] = Field(default_factory=list, description="Technical constraints")
    timestamp: datetime = Field(default_factory=datetime.now)


class ArchitectureDesign(BaseModel):
    """Architecture design from the Architect agent"""
    project_name: str
    project_type: ProjectType
    description: str
    features: List[str]
    technical_requirements: List[str]
    data_structures: Dict[str, str] = Field(default_factory=dict, description="Record/struct definitions")
    transitions: Dict[str, str] = Field(default_factory=dict, description="Function signatures")
    security_considerations: List[str] = Field(default_factory=list)


class CodeRequirements(BaseModel):
    """Normalized requirements for code generation"""
    project_name: str
    description: str
    features: List[str]
    architecture: ArchitectureDesign
    version: str = "1.0.0"
    
    class Config:
        json_schema_extra = {
            "example": {
                "project_name": "my_token",
                "description": "ERC20-like token on Aleo",
                "features": ["mint", "transfer", "burn", "balance_check"],
                "architecture": {...}
            }
        }


class GeneratedCode(BaseModel):
    """Code generated by the CodeGenerator agent"""
    code: str
    language: str = "leo"
    file_path: str = "src/main.leo"
    imports: List[str] = Field(default_factory=list)
    exports: List[str] = Field(default_factory=list)
    warnings: List[str] = Field(default_factory=list)
    generation_time: datetime = Field(default_factory=datetime.now)


class EvaluationResult(BaseModel):
    """Result from the CodeEvaluator agent"""
    is_complete: bool
    has_errors: bool
    missing_features: List[str] = Field(default_factory=list)
    improvements: List[str] = Field(default_factory=list)
    security_issues: List[str] = Field(default_factory=list)
    optimization_suggestions: List[str] = Field(default_factory=list)
    score: float = Field(ge=0, le=100, description="Quality score 0-100")
    needs_iteration: bool = False


class CompilationStatus(str, Enum):
    """Status of compilation attempt"""
    SUCCESS = "success"
    ERROR = "error"
    WARNING = "warning"
    TIMEOUT = "timeout"
    UNKNOWN = "unknown"


class BuildResult(BaseModel):
    """Result from the Builder/Compiler"""
    status: CompilationStatus
    stdout: str = ""
    stderr: str = ""
    warnings: List[str] = Field(default_factory=list)
    errors: List[str] = Field(default_factory=list)
    success: bool = False
    build_time: float = Field(default=0.0, description="Build time in seconds")
    output_files: List[str] = Field(default_factory=list)


class IterationResult(BaseModel):
    """Result of a single iteration in the generation workflow"""
    iteration_number: int
    code: GeneratedCode
    evaluation: EvaluationResult
    build: Optional[BuildResult] = None
    success: bool = False
    duration: float = Field(default=0.0, description="Iteration duration in seconds")


class ProjectResult(BaseModel):
    """Final result of the entire project generation"""
    success: bool
    project_name: str
    final_code: Optional[str] = None
    iterations: List[IterationResult] = Field(default_factory=list)
    total_iterations: int = 0
    total_duration: float = Field(default=0.0, description="Total generation time in seconds")
    error_message: Optional[str] = None
    workspace_path: Optional[str] = None 